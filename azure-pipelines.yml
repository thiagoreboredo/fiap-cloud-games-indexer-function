trigger:
- main # Gatilho para iniciar o pipeline em commits na branch main

pool: 'Default'

variables:
  azureSubscription: 'Acimel - PROD(8ad60e49-3122-49d8-b64e-1e7f12380229)'
  functionAppName: 'fiap-indexer-function'
  projectPath: '$(System.DefaultWorkingDirectory)/IndexerFunction/IndexerFunction.csproj'
  buildConfiguration: 'Release'
  dotnetVersion: '8.x'

stages:
- stage: Build
  displayName: 'Build e Publicação do Projeto'
  jobs:
  - job: Build
    displayName: 'Build'
    steps:
    - task: UseDotNet@2
      displayName: 'Usar .NET $(dotnetVersion)'
      inputs:
        packageType: 'sdk'
        version: '$(dotnetVersion)'

    # 1. Publica a função (sem compactar ainda)
    - task: DotNetCoreCLI@2
      displayName: 'Publicar a Função'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(projectPath)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: false

    # 2. Compacta a saída da publicação em um arquivo .zip
    - task: ArchiveFiles@2
      displayName: 'Compactar Artefatos'
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(functionAppName).zip'
        replaceExistingArchive: true

    # 3. Publica o arquivo .zip gerado
    - task: PublishBuildArtifacts@1
      displayName: 'Publicar Artefato'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(functionAppName).zip'
        ArtifactName: 'functionapp'

- stage: Deploy
  displayName: 'Deploy da Azure Function'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Deploy'
    steps:
    - task: AzureFunctionApp@2
      displayName: 'Deploy da Azure Function App'
      inputs:
        azureSubscription: '$(azureSubscription)'
        appType: 'functionApp'
        appName: '$(functionAppName)'
        package: '$(Pipeline.Workspace)/functionapp/**/*.zip'