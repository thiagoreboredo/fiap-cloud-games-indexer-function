name: $(BuildDefinitionName)_$(Date:yyyyMMdd)$(Rev:.rrr)

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - .gitignore

pool: 'Default' # Seu agente self-hosted no Windows 11

variables:
  azureSubscription: 'Acimel - PROD(8ad60e49-3122-49d8-b64e-1e7f12380229)'
  functionAppName: 'fiap-indexer-function'
  projectPath: 'IndexerFunction/IndexerFunction.csproj' # Caminho relativo ao root do repositório
  buildConfiguration: 'Release'
  dotnetVersion: '8.x'

steps:
- checkout: self

- task: UseDotNet@2
  displayName: 'Usar .NET $(dotnetVersion)'
  inputs:
    packageType: 'sdk'
    version: '$(dotnetVersion)'

- task: DotNetCoreCLI@2
  displayName: 'Restaurar pacotes NuGet'
  inputs:
    command: 'restore'
    projects: '$(projectPath)'
    feedsToUse: 'select' # Ajuste se usar feeds NuGet customizados

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '$(projectPath)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Publicar a Função'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '$(projectPath)'
    arguments: '--configuration $(buildConfiguration) --output $(System.ArtifactsDirectory)'
    zipAfterPublish: true # Gera o ZIP automaticamente

- task: PowerShell@2
  displayName: 'Validar arquivo ZIP gerado'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Verificando ZIPs em: $(System.ArtifactsDirectory)"
      Get-ChildItem -Path "$(System.ArtifactsDirectory)" -Filter "*.zip" -Recurse | ForEach-Object { Write-Host "ZIP encontrado: $($_.FullName)" }
      if (-not (Test-Path "$(System.ArtifactsDirectory)/*.zip")) {
        Write-Error "Nenhum ZIP encontrado!"
        exit 1
      }

- task: AzureFunctionApp@2
  displayName: 'Deploy da Azure Function App'
  inputs:
    azureSubscription: '$(azureSubscription)'
    appType: 'functionApp'
    appName: '$(functionAppName)'
    package: '$(System.ArtifactsDirectory)/*.zip'
    deploymentMethod: 'zipDeploy'

- task: AzureAppServiceManage@0
  displayName: 'Reiniciar Azure Function App'
  inputs:
    azureSubscription: '$(azureSubscription)'
    Action: 'Restart Azure App Service'
    WebAppName: '$(functionAppName)'